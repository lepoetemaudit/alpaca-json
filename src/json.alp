module json

import_type json_utils.result
import json_utils.[(|>), (*>>=), (<*>)]
import json_utils.[drop_ws, hd, decons, require, list_to_binary, reverse, bin_contains]

export_type json_node
export parse

type json_node =
    Object (list (binary, json_node))
  | String binary
  | Array (list json_node)
  | Boolean bool
  | Float float
  | Integer int

let bin_to_num num =
  match bin_contains <<".">> num with
  | true ->
      (beam :erlang :binary_to_float [num] with
         n, is_float n -> Float n)
  | false ->
      (beam :erlang :binary_to_integer [num] with
         i, is_integer i -> Integer i)

let parse_num text =
  match gather_num text [] with
  | (rest, num) -> Ok (rest, (bin_to_num(list_to_binary num)))

let gather_num text acc =
  match text with
  | <<hd: type=binary unit=1, rest: type=binary>> ->
      let next () = gather_num rest (hd :: acc) in
      (match hd with
       | <<"0">> -> next () | <<"1">> -> next () | <<"2">> -> next ()
       | <<"3">> -> next () | <<"4">> -> next () | <<"4">> -> next ()
       | <<"5">> -> next () | <<"6">> -> next () | <<"7">> -> next ()
       | <<"8">> -> next () | <<"9">> -> next () | <<".">> -> next ()
       | _ -> (text, reverse(acc)))

  |  _ -> (text, reverse(acc)) 

let read_string_ text acc =
  match text with
  | <<92,34, rest: type=binary>> -> read_string_ rest (<<34>> :: acc)
  | <<34, rest: type=binary>> -> Ok (rest, list_to_binary (reverse acc))
  | <<c: type=binary unit=1, rest: type=binary>> -> read_string_ rest (c :: acc)
  | <<"">> -> Error "Unexpected end of string"

let read_string text = 
  read_string_ text []

let parse_str text =
  text |> (require <<34>>) *>>= read_string

let make_str_node text =
  match parse_str text with
  | Ok (rest, val) -> Ok (rest, String val)
  | Error err -> Error err    

let parse_list text =
  (require <<"[">> text) *>>= fn t -> read_list_nodes t []

let read_list_nodes text acc =
  match parse_node (drop_ws text) with
  | Ok (rest, node) ->
    (match drop_ws rest with 
     | <<"]", rest_: type=binary>> -> 
         Ok (rest_, (Array (reverse (node :: acc))))
     | <<",", rest_: type=binary>> -> 
         read_list_nodes rest_ (node :: acc)
     | _ -> Error "Unexpected ident in list")
  | Error err -> Error err

let parse_object text =
  (require <<"{">> text) *>>= fn t -> read_object_nodes t []

let read_object_nodes text acc =
  match parse_str text with    
    | Ok (rest, keyname) ->
      -- We can 'forward declare' using this pattern
      let parse_n = (fn t -> parse_node t) in
      match rest |> drop_ws |> require <<":">> <*> drop_ws *>>= parse_n with
        Ok (rest_, node) ->
          (match drop_ws rest_ with
           | <<"}", rest__: type=binary>> -> 
               Ok (rest__, Object (reverse (keyname, node) :: acc))
           | <<",", rest__: type=binary>> -> 
               read_object_nodes (drop_ws rest__) ((keyname, node) :: acc)
           | <<val: type=utf8 unit=1, rest__: type=binary>> -> Error val)
        
let parse_bool text =
  match text with
  | <<"true", rest: type=binary>> -> Ok (rest, Boolean true)
  | <<"false", rest: type=binary>> -> Ok (rest, Boolean false)
  | _ -> Error "Unknown ident"

let parse text =
  match parse_node text with
  | Ok (<<"">>, node) -> Ok node
  | Ok (_, node) -> Error "Unexpected trailing chars"
  | Error err -> Error err

let parse_node text =
  -- try and identify the type
  match text |> drop_ws |> hd with
  -- Strings
  | <<34>> -> make_str_node text        
  -- Ints and flots
  | <<"0">> -> parse_num text | <<"1">> -> parse_num text 
  | <<"2">> -> parse_num text | <<"3">> -> parse_num text
  | <<"4">> -> parse_num text | <<"5">> -> parse_num text
  | <<"6">> -> parse_num text | <<"7">> -> parse_num text
  | <<"8">> -> parse_num text | <<"9">> -> parse_num text
  -- Arrays
  | <<"[">> -> parse_list text
  -- Objects
  | <<"{">> -> parse_object text
  -- Booleans
  | <<"t">> -> parse_bool text
  | <<"f">> -> parse_bool text
     
test "Can parse strings 2" =
  assert.equal (parse <<34,"hello world",34>>) 
               (Ok (String <<"hello world">>))

test "Can parse integers" =
  assert.equal (parse <<"2017">>)
               (Ok (Integer 2017))

test "Can parse floats" =
  assert.equal (parse <<"3.214">>)
               (Ok (Float 3.214))

test "Can parse arrays" =
  assert.equal (parse <<"[1, 2, 3]">>)
               (Ok (Array [(Integer 1), (Integer 2), (Integer 3)]))

test "Can parse nested arrays" =
  assert.equal (parse <<"[[1, 2, 3], [4, 5, 6]]">>)
               (Ok (Array [ Array [(Integer 1), (Integer 2), (Integer 3) ]
                          , Array [(Integer 4), (Integer 5), (Integer 6) ]]))

 test "Can parse objects" =
  assert.equal (parse <<"{", 34, "key", 34, ": 42, ", 34, "key2", 34, ": [1]}">>)
               (Ok (Object [ ( <<"key">>, Integer 42 )
                           , ( <<"key2">>, Array [Integer 1]) ]))

test "Can parse bools" =
  assert.equal (parse <<"[true, false]">>)
               (Ok (Array [Boolean true, Boolean false]))

test "Errors on trailing input" =
  assert.equal (parse <<34,"hello world",34,"trailing...">>) 
               (Error "Unexpected trailing chars")