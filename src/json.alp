module json


export_type json_node
export parse
export hd

type result 'a 'b = 
    Error 'a 
  | Ok 'b

let (*>>=) v f =
  match v with
  | Ok val -> f val
  | Error e -> Error e

let (<*>) v f =
  match v with
  | Ok val -> Ok (f val)
  | Error e -> Error e

let (|>) v f = f v
let (<|) f v = f v

let apply f v = f v

type json_node =
    Object (list (binary, json_node))
  | String binary
  | Array (list json_node)
  | Boolean bool
  | Float float
  | Integer int

let parse text =
  match parse_node text with
  | Ok (<<"">>, node) -> Ok node
  | Ok (_, node) -> Error "Unexpected trailing chars"
  | Error err -> Error err

let hd <<h: type=binary unit=1, rest: type=binary>> = 
  h

let decons <<h: type=binary unit=1, rest: type=binary>> =
  (h, rest)

let decons _ = (<<"">>, <<"">>)

let parse_node text =
  -- try and identify the type
  match hd text with
  | <<34>> -> make_str_node text        
  | <<"0">> -> parse_num text
  | <<"1">> -> parse_num text
  | <<"2">> -> parse_num text
  | <<"3">> -> parse_num text
  | <<"4">> -> parse_num text
  | <<"5">> -> parse_num text
  | <<"6">> -> parse_num text
  | <<"7">> -> parse_num text
  | <<"8">> -> parse_num text
  | <<"9">> -> parse_num text

let parse_num text =
  match gather_num text [] with
  | (rest, num) -> Ok (rest, (bin_to_num(list_to_binary num)))

let bin_to_num num =
  beam :erlang :binary_to_float [num] with
    n, is_float n -> Float n
  | _ -> beam :erlang :binary_to_integer [num] with
           i, is_integer i -> Integer i 

let gather_num text acc =
  match text with
  | <<hd: type=binary unit=1, rest: type=binary>> ->
      let next () = gather_num rest (hd :: acc) in
      (match hd with
       | <<"0">> -> next ()
       | <<"1">> -> next ()
       | <<"2">> -> next ()
       | <<"3">> -> next ()
       | <<"4">> -> next ()
       | <<"4">> -> next ()
       | <<"5">> -> next ()
       | <<"6">> -> next ()
       | <<"7">> -> next ()
       | <<"8">> -> next ()
       | <<"9">> -> next ()
       | <<".">> -> next ()
       | _ -> (text, reverse(acc)))

  |  _ -> (text, reverse(acc)) 

let make_str_node text =
  match parse_str text with
  | Ok (rest, val) -> Ok (rest, String val)
  | Error err -> Error err    

let drop_ws text =
  match text with
  | <<32, rest: type=binary>> -> drop_ws rest
  | t -> t

let require value text =
  match decons text with
  | (<<"">>, _) -> Error "Unexpected end of data"
  | (head, tail) -> match head == value with
                    | true -> Ok tail
                    | false -> Error "Expected required value"
  
let reverse_ list acc =
  match list with
  | h :: t -> reverse_ t (h :: acc)
  | [] -> acc

let reverse [] = []

let reverse list =
  reverse_ list []


let list_to_binary l =
  beam :binary :list_to_bin [l] with
    b, is_binary b -> b


let read_string text acc =
  match text with
  | <<92,34, rest: type=binary>> -> read_string rest (<<34>> :: acc)
  | <<34, rest: type=binary>> -> Ok (rest, list_to_binary (reverse acc))
  | <<c: type=binary unit=1, rest: type=binary>> -> read_string rest (c :: acc)
  | <<"">> -> Error "Unexpected end of string"

let read_string text =
  read_string text []

let parse_str text =
  (require <<34>> text) *>>= fn t -> read_string t  
  

test "Can parse strings" =
  assert.equal (parse <<34,"hello world",34>>) 
               (Ok (String <<"hello world">>))

test "Can parse numbers" =
  assert.equal (parse <<"2017">>)
               (Ok (Integer 2017))

test "Errors on trailing input" =
  assert.equal (parse <<34,"hello world",34,"trailing...">>) 
               (Error "Unexpected trailing chars")

test "Drop ws" =
  assert.equal ((Ok <<"  rest">>) <*> drop_ws)
               (Ok <<"rest">>)

test "Monadic chaining" =
  assert.equal
    (((Ok <<"   hello">>) *>>= (require <<32>>) <*> drop_ws) *>>= parse_str)
    (Error "Expected required value")